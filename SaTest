function Send-FileToAzureStorageAccountWithManagedIdentity {
    param (
        [string]$StorageAccountName,
        [string]$FileLocalPath
    )

    # Get the User Managed Identity access token
    $accessToken = Get-ManagedIdentityAccessToken -ResourceId "https://storage.azure.com/"

    if (-not $accessToken) {
        Write-Host "Error: Unable to get access token for User Managed Identity."
        return
    }

    # Get the container name and blob name from the file path
    $containerName = (Get-Item -Path $FileLocalPath).Directory.Name
    $blobName = (Get-Item -Path $FileLocalPath).Name

    # Create the container if it doesn't exist
    Create-StorageContainerIfNotExists -StorageAccountName $StorageAccountName -ContainerName $containerName -AccessToken $accessToken

    # Upload the file to the container
    Upload-FileToStorageContainer -StorageAccountName $StorageAccountName -ContainerName $containerName -BlobName $blobName -LocalFilePath $FileLocalPath -AccessToken $accessToken

    Write-Host "File '$FileLocalPath' sent to container '$containerName' in Storage Account '$StorageAccountName'."
}

function Get-ManagedIdentityAccessToken {
    param (
        [string]$ResourceId
    )

    # Get the identity endpoint and token from the environment
    $identityEndpoint = $env:IDENTITY_ENDPOINT
    $identityHeader = $env:IDENTITY_HEADER

    # Create a JSON payload for the HTTP request
    $payload = @{
        resource = $ResourceId
    }
    $body = $payload | ConvertTo-Json

    # Make the HTTP request to get the access token
    $response = Invoke-RestMethod -Uri "$identityEndpoint?api-version=2019-08-01&resource=$ResourceId" -Headers @{ "X-IDENTITY-HEADER" = $identityHeader } -Method POST -Body $body

    $accessToken = $response.access_token

    return $accessToken
}

function Create-StorageContainerIfNotExists {
    param (
        [string]$StorageAccountName,
        [string]$ContainerName,
        [string]$AccessToken
    )

    $containerUrl = "https://$StorageAccountName.blob.core.windows.net/$ContainerName"
    $containerHeaders = @{
        "x-ms-version" = "2020-06-12"
        "Authorization" = "Bearer $AccessToken"
    }

    try {
        $response = Invoke-RestMethod -Uri $containerUrl -Headers $containerHeaders -Method Head
        Write-Host "Container '$ContainerName' already exists in Storage Account '$StorageAccountName'."
    }
    catch {
        # If the container doesn't exist, create it
        $containerHeaders.Add("x-ms-blob-public-access", "container")
        Invoke-RestMethod -Uri $containerUrl -Headers $containerHeaders -Method Put
        Write-Host "New container created: $ContainerName in Storage Account '$StorageAccountName'."
    }
}

function Upload-FileToStorageContainer {
    param (
        [string]$StorageAccountName,
        [string]$ContainerName,
        [string]$BlobName,
        [string]$LocalFilePath,
        [string]$AccessToken
    )

    $fileUrl = "https://$StorageAccountName.blob.core.windows.net/$ContainerName/$BlobName"
    $fileHeaders = @{
        "x-ms-version" = "2020-06-12"
        "Authorization" = "Bearer $AccessToken"
        "x-ms-blob-type" = "BlockBlob"
    }

    Invoke-RestMethod -Uri $fileUrl -Headers $fileHeaders -Method Put -InFile $LocalFilePath
}

# Parameters
$StorageAccountName = "YOUR_STORAGE_ACCOUNT_NAME"
$FileLocalPath = "LOCAL_FILE_PATH.txt"

Send-FileToAzureStorageAccountWithManagedIdentity -StorageAccountName $StorageAccountName -FileLocalPath $FileLocalPath
